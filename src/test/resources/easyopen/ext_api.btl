package ${package};
import com.gitee.easyopen.annotation.Api;
import com.gitee.easyopen.annotation.ApiService;
import com.gitee.easyopen.doc.DataType;
import com.gitee.easyopen.doc.annotation.ApiDoc;
import com.gitee.easyopen.doc.annotation.ApiDocField;
import com.gitee.easyopen.doc.annotation.ApiDocMethod;
import org.springframework.beans.factory.annotation.Autowired;

import javax.validation.constraints.NotNull;

@ApiService
@ApiDoc("${comment}管理模块")
public class ${className} {
        @Autowired
        private ${serviceName} ${serviceNameField};

        @Api(name = "${apiName}list", version = ApiInfo.API_VERSION)
        @ApiDocMethod(description = "${comment}列表"
                , params = {
                        @ApiDocField(name = "keyword", description = "关键词"),
                        @ApiDocField(name = "page", description = "第几页", required = true, example = "1"),
                        @ApiDocField(name = "size", description = "每页几条数据", required = true, example = "10")
                }
                ,results = {
                        @ApiDocField(name = "page", description = "第几页", dataType = DataType.INT, example = "1"),
                        @ApiDocField(name = "size", description = "每页几条数据", dataType = DataType.INT, example = "10"),
                        @ApiDocField(name = "totalRow", description = "数据总数", dataType = DataType.LONG, example = "100"),
                        @ApiDocField(name = "totalPage", description = "页总数", dataType = DataType.LONG, example = "100"),
                        @ApiDocField(name = "result", description = "数据", dataType = DataType.ARRAY, elementClass = ${entityClass}DTO.class)
                }
        )
        public PageInfo<${entityClass}DTO> getPageList(${entityClass}ListRequestParams requestParams) {
            return ${serviceNameField}.getPageList(requestParams);
        }

        @Api(name = "${apiName}create", version = ApiInfo.API_VERSION)
        @ApiDocMethod(description = "添加${comment}")
        public CreateResponseBody<Integer> create(${entityClass}CreateRequestParams requestParams){
            return ${serviceNameField}.create(requestParams);
        }

        @Api(name = "${apiName}detail", version = ApiInfo.API_VERSION)
        @ApiDocMethod(description = "${comment}详情")
        public ${entityClass}DTO detail(@NotNull(message = "id不能为空") Integer id){
            return ${serviceNameField}.detail(id);
        }

        @Api(name = "${apiName}update", version = ApiInfo.API_VERSION)
        @ApiDocMethod(description = "修改${comment}")
        public UpdateResponseBody update(${entityClass}UpdateRequestParams requestParams){
            return ${serviceNameField}.update(requestParams);
        }

        @Api(name = "${apiName}delete", version = ApiInfo.API_VERSION)
        @ApiDocMethod(description = "删除${comment}")
        public DeleteResponseBody delete(DeleteRequestParams<Integer> requestParams){
            return ${serviceNameField}.delete(requestParams.getIds());
        }
}
